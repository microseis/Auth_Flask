openapi: 3.0.0
info:
  title: Roles API
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000/
    description: Dev server
paths:
  /api/register:
    post:
      summary: Метод создания пользователя
      tags:
        - User Auth
      operationId: register_user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/login:
    post:
      summary: Метод залогинивания пользователя
      tags:
        - User Auth
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user_logout:
    post:
      summary: Метод разлогинивания пользователя
      tags:
        - User Auth
      operationId: logoutUser
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{user_id}:
    put:
      summary: Метод обновления роли пользователя
      tags:
        - Users
      operationId: updateUserRoleById
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: string
          example: 773cc503-802c-45c5-848c-76926c7a8314
        - name: role_name
          in: query
          required: true
          schema:
            type: string
          example: Subscriber
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Метод удаления роли пользователя
      tags:
        - Users
      operationId: deleteUserRoleById
      parameters:
        - name: user_id
          in: path
          required: true
          description: Идентификатор пользователя
          schema:
            type: string
          example: 773cc503-802c-45c5-848c-76926c7a8314
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /roles:
    get:
      summary: Метод получения списка ролей
      tags:
        - Roles
      operationId: getAllRoles
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Метод создания роли
      tags:
        - Roles
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /roles/{role_id}:
    get:
      summary: Метод получения выбранной роли
      tags:
        - Roles
      operationId: getRoleById
      parameters:
        - name: role_id
          in: path
          required: true
          description: Идентификатор роли
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Метод удаления выбранной роли
      tags:
        - Roles
      operationId: deleteRoleById
      parameters:
        - name: role_id
          in: path
          required: true
          description: Идентификатор роли
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Метод обновления выбранной роли
      tags:
        - Roles
      operationId: updateRoleById
      parameters:
        - name: role_id
          in: path
          required: true
          description: Идентификатор роли
        - name: role_name
          in: query
          required: true
          schema:
            type: string
          example: Subscriber
        - name: is_privileged
          in: query
          required: true
          description: Наличие дополнительных прав
          schema:
            type: boolean
          example: False
        - name: is_superuser
          in: query
          required: true
          description: Суперпользователь
          schema:
            type: boolean
          example: False

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        'default':
          description: Все ошибки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Role:
      type: object
      required:
        - name
        - id
        - is_superuser
        - is_privileged
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Admin
        is_superuser:
          type: boolean
          example: False
        is_privileged:
          type: boolean
          example: False

    Roles:
      type: array
      items:
      $ref: '#/components/schemas/Role'
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
    User:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: login
        password:
          type: string
          example: thisismypassword
