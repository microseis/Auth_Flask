version: "3.7"
services:

  app:
    container_name: app
    restart: unless-stopped
    image: app_image
    build:
      context: .
    env_file:
      - .env
    networks:
      - my_network
    volumes:
      - static_data:/opt/app/templates
    ports:
      - "8000:8000"

  redis:
    image: redis:alpine
    restart: always
    networks:
      - my_network
    depends_on:
      - app

  nginx:
      restart: unless-stopped
      build:
          context: ./nginx
          dockerfile: Dockerfile
      volumes:
        - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      ports:
        - "80:80"
      networks:
        - my_network
      links:
        - app
      environment:
        NGINX_SET_REAL_IPS_FROM: "[\"172.17.0.0/16\", \"192.168.0.10\"]"
      depends_on:
        - app
        - redis


  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USER:-admin}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-123qwe}
      - POSTGRES_DB=${DB_NAME:-users}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ./db:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network


networks:
  my_network:
    driver: bridge

volumes:
  static_data: